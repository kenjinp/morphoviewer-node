!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.morphologycorejs=e()}(this,function(){"use strict";const t={0:"undefined",1:"soma",2:"axon",3:"basal_dendrite",4:"apical_dendrite",5:"custom"},e={undefined:0,soma:1,axon:2,basal_dendrite:3,apical_dendrite:4,custom:5};class i{constructor(t=null){this._id=null,this._parent=null,this._children=[],this._typename=null,this._typevalue=null,this._points=null,this._radiuses=null,this._morphology=t}setId(t){this._id=t}getId(){return this._id}setTypename(t){t in e?(this._typename=t,this._typevalue=e[t]):console.warn(`The typename must be one of ${Object.key(e).join(" ")}`)}getTypename(){return this._typename}setTypeValue(t){this._typevalue=t}getTypevalue(){return this._typevalue}addPoint(t,e,i,s=1){this._points.push([t,e,i]),this._radiuses.push(s)}getPoints(){return this._points}getRadiuses(){return this._radiuses}initWithRawSection(i){return this._id=i.id,this._points=i.points.map(t=>t.position),this._radiuses=i.points.map(t=>t.radius),(i.typename||i.typevalue)&&(this._typename=i.typename||t[i.typevalue],this._typevalue=i.typevalue||e[i.typename]),this._id}setParent(t){return t&&t.getId()!==this._id?(this._parent=t,!0):(console.warn("A section cannot be the parent of itself."),!1)}getParent(){return this._parent}addChild(t){return t.getId()!==this._id?(this.hasChild(t)?console.warn("The given section is already one of the child to this one."):this._children.push(t),!0):(console.warn("A section cannot be the child of itself."),!1)}hasChild(t){if(!this._children)return!1;const e=t.getId();for(let t=0;t<this._children.length;t+=1)if(this._children[t].getId()===e)return!0;return!1}getSize(){let t=0;for(let e=0;e<this._points.length-1;e+=1){const i=this._points[e],s=this._points[e+1],n=i[0]-s[0],o=i[1]-s[1],h=i[2]-s[2];t+=Math.sqrt(n*n+o*o+h*h)}return t}getMorphology(){return this._morphology}getChildren(){return this._children}}class s{constructor(){this._id=null,this._typename="soma",this._typevalue=1,this._points=[],this._radius=null}setId(t){this._id=t}getId(){return this._id}addPoint(t,e,i){this._points.push([t,e,i])}getPoints(){return this._points}setRadius(t){this._radius=t}getRadius(){return this._radius}getCenter(){const t=this._points.length;if(1===t)return this._points[0].slice();if(t>1){const e=[0,0,0];for(let i=0;i<t;i+=1)e[0]+=this._points[i][0],e[1]+=this._points[i][1],e[2]+=this._points[i][2];return e[0]/=t,e[1]/=t,e[2]/=t,e}return null}initWithRawSection(t){return t?(this._id=t.id,this._points=t.points.map(t=>t.position),this._radius=t.radius,this._id):(console.warn("Cannot init the Soma instance, no soma data provided in raw morphology."),null)}}return{Morphology:class{constructor(){this._id=null,this._sections={},this._soma=null,this._specialSections={}}setId(t){this._id=t}getId(){return this._id}buildFromRawMorphology(t){t.soma&&(this._soma=new s,this._soma.initWithRawSection(t.soma));for(let e=0;e<t.sections.length;e+=1){const s=new i(this),n=s.initWithRawSection(t.sections[e]);this._sections[n]=s}for(let e=0;e<t.sections.length;e+=1){const i=t.sections[e],s=this._sections[i.id];if(null!==i.parent){const t=this._sections[i.parent];s.setParent(t)}const n=i.children.map(t=>this._sections[t]);for(let t=0;t<n.length;t+=1)s.addChild(n[t])}}getNumberOfSections(){return Object.keys(this._sections)}getSection(t){return t in this._sections?this._sections[t]:null}getArrayOfSections(){return Object.values(this._sections)}getSoma(){return this._soma}getOrphanSections(t=!1){return this._findSpecialSection("orphans",t=>!t.getParent(),t),this._specialSections.orphans}_findSpecialSection(t,e,i=!1){if(t in this._specialSections||(this._specialSections[t]=null),i||!this._specialSections[t]){this._specialSections[t]=[];const i=Object.values(this._sections);for(let s=0;s<i.length;s+=1)e(i[s])&&this._specialSections[t].push(i[s])}return this._specialSections[t]}}}});
